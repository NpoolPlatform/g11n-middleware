// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/g11n-middleware/pkg/db/ent/lang"
	"github.com/google/uuid"
)

// Lang is the model entity for the Lang schema.
type Lang struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang string `json:"lang,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lang) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lang.FieldID, lang.FieldCreatedAt, lang.FieldUpdatedAt, lang.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case lang.FieldLang, lang.FieldLogo, lang.FieldName, lang.FieldShort:
			values[i] = new(sql.NullString)
		case lang.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Lang", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lang fields.
func (l *Lang) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lang.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = uint32(value.Int64)
		case lang.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = uint32(value.Int64)
			}
		case lang.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = uint32(value.Int64)
			}
		case lang.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = uint32(value.Int64)
			}
		case lang.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				l.EntID = *value
			}
		case lang.FieldLang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lang", values[i])
			} else if value.Valid {
				l.Lang = value.String
			}
		case lang.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				l.Logo = value.String
			}
		case lang.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case lang.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				l.Short = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Lang.
// Note that you need to call Lang.Unwrap() before calling this method if this Lang
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lang) Update() *LangUpdateOne {
	return (&LangClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Lang entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lang) Unwrap() *Lang {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lang is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lang) String() string {
	var builder strings.Builder
	builder.WriteString("Lang(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", l.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", l.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", l.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", l.EntID))
	builder.WriteString(", ")
	builder.WriteString("lang=")
	builder.WriteString(l.Lang)
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(l.Logo)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(l.Name)
	builder.WriteString(", ")
	builder.WriteString("short=")
	builder.WriteString(l.Short)
	builder.WriteByte(')')
	return builder.String()
}

// Langs is a parsable slice of Lang.
type Langs []*Lang

func (l Langs) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
