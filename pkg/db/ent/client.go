// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/g11n-middleware/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/g11n-middleware/pkg/db/ent/appcountry"
	"github.com/NpoolPlatform/g11n-middleware/pkg/db/ent/applang"
	"github.com/NpoolPlatform/g11n-middleware/pkg/db/ent/country"
	"github.com/NpoolPlatform/g11n-middleware/pkg/db/ent/lang"
	"github.com/NpoolPlatform/g11n-middleware/pkg/db/ent/message"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppCountry is the client for interacting with the AppCountry builders.
	AppCountry *AppCountryClient
	// AppLang is the client for interacting with the AppLang builders.
	AppLang *AppLangClient
	// Country is the client for interacting with the Country builders.
	Country *CountryClient
	// Lang is the client for interacting with the Lang builders.
	Lang *LangClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppCountry = NewAppCountryClient(c.config)
	c.AppLang = NewAppLangClient(c.config)
	c.Country = NewCountryClient(c.config)
	c.Lang = NewLangClient(c.config)
	c.Message = NewMessageClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		AppCountry: NewAppCountryClient(cfg),
		AppLang:    NewAppLangClient(cfg),
		Country:    NewCountryClient(cfg),
		Lang:       NewLangClient(cfg),
		Message:    NewMessageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		AppCountry: NewAppCountryClient(cfg),
		AppLang:    NewAppLangClient(cfg),
		Country:    NewCountryClient(cfg),
		Lang:       NewLangClient(cfg),
		Message:    NewMessageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppCountry.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppCountry.Use(hooks...)
	c.AppLang.Use(hooks...)
	c.Country.Use(hooks...)
	c.Lang.Use(hooks...)
	c.Message.Use(hooks...)
}

// AppCountryClient is a client for the AppCountry schema.
type AppCountryClient struct {
	config
}

// NewAppCountryClient returns a client for the AppCountry from the given config.
func NewAppCountryClient(c config) *AppCountryClient {
	return &AppCountryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcountry.Hooks(f(g(h())))`.
func (c *AppCountryClient) Use(hooks ...Hook) {
	c.hooks.AppCountry = append(c.hooks.AppCountry, hooks...)
}

// Create returns a builder for creating a AppCountry entity.
func (c *AppCountryClient) Create() *AppCountryCreate {
	mutation := newAppCountryMutation(c.config, OpCreate)
	return &AppCountryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppCountry entities.
func (c *AppCountryClient) CreateBulk(builders ...*AppCountryCreate) *AppCountryCreateBulk {
	return &AppCountryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppCountry.
func (c *AppCountryClient) Update() *AppCountryUpdate {
	mutation := newAppCountryMutation(c.config, OpUpdate)
	return &AppCountryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppCountryClient) UpdateOne(ac *AppCountry) *AppCountryUpdateOne {
	mutation := newAppCountryMutation(c.config, OpUpdateOne, withAppCountry(ac))
	return &AppCountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppCountryClient) UpdateOneID(id uint32) *AppCountryUpdateOne {
	mutation := newAppCountryMutation(c.config, OpUpdateOne, withAppCountryID(id))
	return &AppCountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppCountry.
func (c *AppCountryClient) Delete() *AppCountryDelete {
	mutation := newAppCountryMutation(c.config, OpDelete)
	return &AppCountryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppCountryClient) DeleteOne(ac *AppCountry) *AppCountryDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppCountryClient) DeleteOneID(id uint32) *AppCountryDeleteOne {
	builder := c.Delete().Where(appcountry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppCountryDeleteOne{builder}
}

// Query returns a query builder for AppCountry.
func (c *AppCountryClient) Query() *AppCountryQuery {
	return &AppCountryQuery{
		config: c.config,
	}
}

// Get returns a AppCountry entity by its id.
func (c *AppCountryClient) Get(ctx context.Context, id uint32) (*AppCountry, error) {
	return c.Query().Where(appcountry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppCountryClient) GetX(ctx context.Context, id uint32) *AppCountry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppCountryClient) Hooks() []Hook {
	hooks := c.hooks.AppCountry
	return append(hooks[:len(hooks):len(hooks)], appcountry.Hooks[:]...)
}

// AppLangClient is a client for the AppLang schema.
type AppLangClient struct {
	config
}

// NewAppLangClient returns a client for the AppLang from the given config.
func NewAppLangClient(c config) *AppLangClient {
	return &AppLangClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applang.Hooks(f(g(h())))`.
func (c *AppLangClient) Use(hooks ...Hook) {
	c.hooks.AppLang = append(c.hooks.AppLang, hooks...)
}

// Create returns a builder for creating a AppLang entity.
func (c *AppLangClient) Create() *AppLangCreate {
	mutation := newAppLangMutation(c.config, OpCreate)
	return &AppLangCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppLang entities.
func (c *AppLangClient) CreateBulk(builders ...*AppLangCreate) *AppLangCreateBulk {
	return &AppLangCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppLang.
func (c *AppLangClient) Update() *AppLangUpdate {
	mutation := newAppLangMutation(c.config, OpUpdate)
	return &AppLangUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppLangClient) UpdateOne(al *AppLang) *AppLangUpdateOne {
	mutation := newAppLangMutation(c.config, OpUpdateOne, withAppLang(al))
	return &AppLangUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppLangClient) UpdateOneID(id uint32) *AppLangUpdateOne {
	mutation := newAppLangMutation(c.config, OpUpdateOne, withAppLangID(id))
	return &AppLangUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppLang.
func (c *AppLangClient) Delete() *AppLangDelete {
	mutation := newAppLangMutation(c.config, OpDelete)
	return &AppLangDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppLangClient) DeleteOne(al *AppLang) *AppLangDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppLangClient) DeleteOneID(id uint32) *AppLangDeleteOne {
	builder := c.Delete().Where(applang.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppLangDeleteOne{builder}
}

// Query returns a query builder for AppLang.
func (c *AppLangClient) Query() *AppLangQuery {
	return &AppLangQuery{
		config: c.config,
	}
}

// Get returns a AppLang entity by its id.
func (c *AppLangClient) Get(ctx context.Context, id uint32) (*AppLang, error) {
	return c.Query().Where(applang.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppLangClient) GetX(ctx context.Context, id uint32) *AppLang {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppLangClient) Hooks() []Hook {
	hooks := c.hooks.AppLang
	return append(hooks[:len(hooks):len(hooks)], applang.Hooks[:]...)
}

// CountryClient is a client for the Country schema.
type CountryClient struct {
	config
}

// NewCountryClient returns a client for the Country from the given config.
func NewCountryClient(c config) *CountryClient {
	return &CountryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `country.Hooks(f(g(h())))`.
func (c *CountryClient) Use(hooks ...Hook) {
	c.hooks.Country = append(c.hooks.Country, hooks...)
}

// Create returns a builder for creating a Country entity.
func (c *CountryClient) Create() *CountryCreate {
	mutation := newCountryMutation(c.config, OpCreate)
	return &CountryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Country entities.
func (c *CountryClient) CreateBulk(builders ...*CountryCreate) *CountryCreateBulk {
	return &CountryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Country.
func (c *CountryClient) Update() *CountryUpdate {
	mutation := newCountryMutation(c.config, OpUpdate)
	return &CountryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CountryClient) UpdateOne(co *Country) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountry(co))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CountryClient) UpdateOneID(id uint32) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountryID(id))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Country.
func (c *CountryClient) Delete() *CountryDelete {
	mutation := newCountryMutation(c.config, OpDelete)
	return &CountryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CountryClient) DeleteOne(co *Country) *CountryDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CountryClient) DeleteOneID(id uint32) *CountryDeleteOne {
	builder := c.Delete().Where(country.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CountryDeleteOne{builder}
}

// Query returns a query builder for Country.
func (c *CountryClient) Query() *CountryQuery {
	return &CountryQuery{
		config: c.config,
	}
}

// Get returns a Country entity by its id.
func (c *CountryClient) Get(ctx context.Context, id uint32) (*Country, error) {
	return c.Query().Where(country.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CountryClient) GetX(ctx context.Context, id uint32) *Country {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CountryClient) Hooks() []Hook {
	hooks := c.hooks.Country
	return append(hooks[:len(hooks):len(hooks)], country.Hooks[:]...)
}

// LangClient is a client for the Lang schema.
type LangClient struct {
	config
}

// NewLangClient returns a client for the Lang from the given config.
func NewLangClient(c config) *LangClient {
	return &LangClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lang.Hooks(f(g(h())))`.
func (c *LangClient) Use(hooks ...Hook) {
	c.hooks.Lang = append(c.hooks.Lang, hooks...)
}

// Create returns a builder for creating a Lang entity.
func (c *LangClient) Create() *LangCreate {
	mutation := newLangMutation(c.config, OpCreate)
	return &LangCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lang entities.
func (c *LangClient) CreateBulk(builders ...*LangCreate) *LangCreateBulk {
	return &LangCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lang.
func (c *LangClient) Update() *LangUpdate {
	mutation := newLangMutation(c.config, OpUpdate)
	return &LangUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LangClient) UpdateOne(l *Lang) *LangUpdateOne {
	mutation := newLangMutation(c.config, OpUpdateOne, withLang(l))
	return &LangUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LangClient) UpdateOneID(id uint32) *LangUpdateOne {
	mutation := newLangMutation(c.config, OpUpdateOne, withLangID(id))
	return &LangUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lang.
func (c *LangClient) Delete() *LangDelete {
	mutation := newLangMutation(c.config, OpDelete)
	return &LangDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LangClient) DeleteOne(l *Lang) *LangDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LangClient) DeleteOneID(id uint32) *LangDeleteOne {
	builder := c.Delete().Where(lang.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LangDeleteOne{builder}
}

// Query returns a query builder for Lang.
func (c *LangClient) Query() *LangQuery {
	return &LangQuery{
		config: c.config,
	}
}

// Get returns a Lang entity by its id.
func (c *LangClient) Get(ctx context.Context, id uint32) (*Lang, error) {
	return c.Query().Where(lang.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LangClient) GetX(ctx context.Context, id uint32) *Lang {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LangClient) Hooks() []Hook {
	hooks := c.hooks.Lang
	return append(hooks[:len(hooks):len(hooks)], lang.Hooks[:]...)
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id uint32) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id uint32) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id uint32) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id uint32) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	hooks := c.hooks.Message
	return append(hooks[:len(hooks):len(hooks)], message.Hooks[:]...)
}
